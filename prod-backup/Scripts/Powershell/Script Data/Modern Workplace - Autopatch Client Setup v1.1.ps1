
function Cleanup {
    cd $PSScriptRoot
    if (Test-Path $ScriptFolderPath) 
    {
        Write-Host 'Removing script directory'
        Remove-Item -LiteralPath $ScriptFolderPath -Force -Recurse
    }
}

Function Setup {
    # Cleanup scheduled task if it exists
    $oldTask = Get-ScheduledTask -Taskname $ScheduledTaskName -ErrorAction SilentlyContinue
    if ($oldTask)
    {
        if ($oldTask.State -eq 'Running')
        {
            Stop-ScheduledTask -TaskName $ScheduledTaskName
        }
        Unregister-ScheduledTask -TaskName $ScheduledTaskName -Confirm:$false -ErrorAction SilentlyContinue
    }
    Cleanup
}

$LogPrefix = "\AutopatchClientSetupInstallScheduled"
$Timestamp = Get-Date
$LogPath = "$Env:windir\ccm\logs"
$LogFile = $LogPath + $LogPrefix + $Timestamp.ToFileTimeUtc() + ".log"
$ScheduledTaskName = 'Autopatch Client Setup Installer'
$ScriptFolderPath = "$env:SystemDrive\ProgramData\Microsoft\AutopatchSetupScheduled"
$SystemScriptPath = "$ScriptFolderPath\SetupAutopatchClientPackage.ps1"
$SystemScript = ''

if (-not (Test-Path $LogPath))
{
    New-Item -Force -ItemType directory -Path $LogPath
}
Start-Transcript -Path $LogFile

#Cleanup lingering resources from previous runs
Setup

$content = [System.Convert]::FromBase64String($SystemScript)

New-Item -ItemType Directory -Force -Path $ScriptFolderPath
Set-Content -Path $SystemScriptPath -Value $content -Encoding Byte

$Trigger = New-ScheduledTaskTrigger -Once -At ((Get-Date).AddHours(4)) -RepetitionInterval (New-TimeSpan -Hours 4) # Specify the trigger settings
$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries
$User = "NT AUTHORITY\SYSTEM"
$Argument = "-ExecutionPolicy Bypass $SystemScriptPath"
$Action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument $argument # Specify what program to run andtask with its parameters
Register-ScheduledTask -TaskName $ScheduledTaskName -Trigger $Trigger -User $User -Action $Action -Settings $Settings -RunLevel Highest -Force

$MaxRetries = 10
Start-ScheduledTask -TaskName $ScheduledTaskName
$ScheduledTask = Get-ScheduledTask -TaskName $ScheduledTaskName -ErrorAction SilentlyContinue

# Wait for the scheduled task to complete so its log can be read and uploaded
while (-not (($ScheduledTask.State -eq 'Ready') -or ($MaxRetries -eq 0))) 
{
    Write-Host "Waiting for scheduled task to complete"
    Start-Sleep -seconds 60
    $MaxRetries--
    $ScheduledTask = Get-ScheduledTask -TaskName $ScheduledTaskName -ErrorAction SilentlyContinue
    if (-not $ScheduledTask)
    {
        # The scheduled task was removed by the install script because it installed clients successfully
        break
    }
}

if (-not $ScheduledTask)
{
    # The scheduled task was removed by the install script because it installed clients successfully
    Write-Host "[SUCCESSFUL_AUTOPATCH_CLIENT_SETUP_SCHEDULED]"
    Cleanup
    Stop-Transcript -Verbose
    exit 0
}

if ($MaxRetries -ne 0)
{
    # There was some error in attempting to install the clients
    Write-Error "[FAILED_AUTOPATCH_CLIENT_SETUP_SCHEDULED]" -Category NotInstalled
}
else
{
    # We timed out on waiting for the task to complete
    Write-Error "[UNKNOWN_AUTOPATCH_CLIENT_SETUP_SCHEDULED]" -Category OperationTimeout
}

# Grab results from most recent log file and add them to the transcript
$InternalScriptPrefix = 'AutopatchClientSetupInstallTask'
$LogFound = $false
foreach ($InstallLogFile in (Get-ChildItem $LogPath | Sort-Object LastAccessTime -Descending)) 
{
    if ($InstallLogFile.Name.StartsWith($InternalScriptPrefix) -and $InstallLogFile.Extension.Equals('.log')) 
    {
        Write-Error "----------[Start] Results from Install Task ----------"
        $FullInstallLogPath = $LogPath + '\' + $InstallLogFile.Name
        $LogContents = Get-Content $FullInstallLogPath -Raw
        Write-Error $LogContents
        Write-Error "----------[End] Results from Install Task ----------"
        $LogFound = $true
        break
    }
}

if (-not $LogFound)
{
    Write-Error "[Log Not Found]"
    Get-ChildItem $LogPath | Sort-Object LastAccessTime -Descending
}

Stop-Transcript -Verbose
exit 8
# SIG # Begin signature block
# MIIoLAYJKoZIhvcNAQcCoIIoHTCCKBkCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCDSdpvb/HtueAtP
# /MsG8q407PiRGQkMlL5gUd32pF++HaCCDXYwggX0MIID3KADAgECAhMzAAADTrU8
# esGEb+srAAAAAANOMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjMwMzE2MTg0MzI5WhcNMjQwMzE0MTg0MzI5WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQDdCKiNI6IBFWuvJUmf6WdOJqZmIwYs5G7AJD5UbcL6tsC+EBPDbr36pFGo1bsU
# p53nRyFYnncoMg8FK0d8jLlw0lgexDDr7gicf2zOBFWqfv/nSLwzJFNP5W03DF/1
# 1oZ12rSFqGlm+O46cRjTDFBpMRCZZGddZlRBjivby0eI1VgTD1TvAdfBYQe82fhm
# WQkYR/lWmAK+vW/1+bO7jHaxXTNCxLIBW07F8PBjUcwFxxyfbe2mHB4h1L4U0Ofa
# +HX/aREQ7SqYZz59sXM2ySOfvYyIjnqSO80NGBaz5DvzIG88J0+BNhOu2jl6Dfcq
# jYQs1H/PMSQIK6E7lXDXSpXzAgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUnMc7Zn/ukKBsBiWkwdNfsN5pdwAw
# RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW
# MBQGA1UEBRMNMjMwMDEyKzUwMDUxNjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
# tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG
# CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu
# Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0
# MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAD21v9pHoLdBSNlFAjmk
# mx4XxOZAPsVxxXbDyQv1+kGDe9XpgBnT1lXnx7JDpFMKBwAyIwdInmvhK9pGBa31
# TyeL3p7R2s0L8SABPPRJHAEk4NHpBXxHjm4TKjezAbSqqbgsy10Y7KApy+9UrKa2
# kGmsuASsk95PVm5vem7OmTs42vm0BJUU+JPQLg8Y/sdj3TtSfLYYZAaJwTAIgi7d
# hzn5hatLo7Dhz+4T+MrFd+6LUa2U3zr97QwzDthx+RP9/RZnur4inzSQsG5DCVIM
# pA1l2NWEA3KAca0tI2l6hQNYsaKL1kefdfHCrPxEry8onJjyGGv9YKoLv6AOO7Oh
# JEmbQlz/xksYG2N/JSOJ+QqYpGTEuYFYVWain7He6jgb41JbpOGKDdE/b+V2q/gX
# UgFe2gdwTpCDsvh8SMRoq1/BNXcr7iTAU38Vgr83iVtPYmFhZOVM0ULp/kKTVoir
# IpP2KCxT4OekOctt8grYnhJ16QMjmMv5o53hjNFXOxigkQWYzUO+6w50g0FAeFa8
# 5ugCCB6lXEk21FFB1FdIHpjSQf+LP/W2OV/HfhC3uTPgKbRtXo83TZYEudooyZ/A
# Vu08sibZ3MkGOJORLERNwKm2G7oqdOv4Qj8Z0JrGgMzj46NFKAxkLSpE5oHQYP1H
# tPx1lPfD7iNSbJsP6LiUHXH1MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
# Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
# CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03
# a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr
# rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg
# OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy
# 4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9
# sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh
# dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
# A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB
# w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn
# Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
# lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w
# ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o
# ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
# VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa
# BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
# bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG
# AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
# L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
# HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG
# AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
# AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb
# C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l
# hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6
# I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0
# wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560
# STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam
# ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa
# J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
# XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA
# 9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt
# Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
# /Xmfwb1tbWrJUnMTDXpQzTGCGgwwghoIAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp
# Z25pbmcgUENBIDIwMTECEzMAAANOtTx6wYRv6ysAAAAAA04wDQYJYIZIAWUDBAIB
# BQCggbAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIHpYfjFGhxz+AKHlvfi+53th
# RXx0zy77BEtcEstDfbTvMEQGCisGAQQBgjcCAQwxNjA0oBSAEgBNAGkAYwByAG8A
# cwBvAGYAdKEcgBpodHRwczovL3d3dy5taWNyb3NvZnQuY29tIDANBgkqhkiG9w0B
# AQEFAASCAQBjMzrnIHNpy49O7f2J88NLeQ6Ob9uNJtPbSLq98F3DtyzQf0Wd7F2p
# y1T22xJcVFBMwQDdbes53elkQNB5DCj/ZR+81+7kRvDutbrNWoL+MFxnJsMHouVv
# 2GCQFKbPGCVFfUu1Oh+Usrxz8ctuSTnAGEfF1LMDSm4SfcRsc2GmKrOMqlXYQ0/o
# caqyzo8kRoIHk54JJASZHBzVeiU6JLeMyHpxGVs3AnHMkJB3hnrlUAp6jLL00vB5
# vQhOJUlOM11/EO5pI7/coW14QnFSvIVPzFaWpWQiVdUY27/xxQQzzXpXvQWZVvT4
# TOBxPgGaxjpOw8316DoaXaXm8B+BxUDooYIXlDCCF5AGCisGAQQBgjcDAwExgheA
# MIIXfAYJKoZIhvcNAQcCoIIXbTCCF2kCAQMxDzANBglghkgBZQMEAgEFADCCAVIG
# CyqGSIb3DQEJEAEEoIIBQQSCAT0wggE5AgEBBgorBgEEAYRZCgMBMDEwDQYJYIZI
# AWUDBAIBBQAEIB9moB2TpGrOOqCz83BTrEZUGzsIJO1obbkaLM0171IPAgZlKFzE
# XcMYEzIwMjMxMDIzMjIwNTA0LjExNFowBIACAfSggdGkgc4wgcsxCzAJBgNVBAYT
# AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
# VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBB
# bWVyaWNhIE9wZXJhdGlvbnMxJzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjpBNDAw
# LTA1RTAtRDk0NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vydmlj
# ZaCCEeowggcgMIIFCKADAgECAhMzAAAB1idp/3ItVsiuAAEAAAHWMA0GCSqGSIb3
# DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
# VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
# BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIzMDUyNTE5
# MTIzNFoXDTI0MDIwMTE5MTIzNFowgcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
# YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
# Q29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlv
# bnMxJzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjpBNDAwLTA1RTAtRDk0NzElMCMG
# A1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcN
# AQEBBQADggIPADCCAgoCggIBAM8szY6byvm7d9xsMQ5fJ0m1uRblTfgoVp+0L7xD
# I2qmUwjNJMLVOgTTNzB5AK88h+li3I8HeO3p89Gmu+HAKSxTD2nQ5+ZnNY8O+S3j
# QFRK27zXdCWuWhF2mUvPbGmTb2Mg5nj6sFsppmQE9nhHgtdCGSQed7Rj9iHzlmow
# xFoxaQEzqdTBXloOLBep0T0nKXSLVpZhsKrPAFF03sJOUAnGsnjui/e5/+UWD2Gd
# VBypBiBGtEWkM0Uw4/SDDPk2PprbgZmdwUQZGYrAiYv7kpY+dWC9p0lJGnpmqthX
# cWZsGZm2wXSFKVWMtA7yfF6UZXtO+oghIiy/ZtAyBQFUTPzAcXJTfzreAePwEJsS
# knObvl8smwvc/rqUlQ1E3sJGx80Rsd1f93qOilU4XAXuiaZNCOlTfsD/thHTAkNO
# 3pmxdT6P/BiWj1vba3WpS2GqNGzfagZ/ZNFMKhBYuEl7dwAhhGWVr+AQqVu4MOwb
# f3brLgQwcXFOOyOtxkRsNbCMHfCunXUPKDVApwPItSzZqcGiW9DAlM3SYw65c7y0
# HPbSeD/5fD7jD5b08yS9bV9piLjflWMpFmwd/Eg+MjNnTB/gWJuZU8kdn5pPEaxU
# k/HJ0KG+8YJ/h97xd9hj0/mVuf1Jwpzhp1N3jgYKsGUn8k6ygDg680djpb5dwpVw
# ggZbAgMBAAGjggFJMIIBRTAdBgNVHQ4EFgQUYZpUNjtNAGIwIqDb6P/NFNxixk4w
# HwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKg
# UIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0
# JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAw
# XjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9j
# ZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQw
# DAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8E
# BAMCB4AwDQYJKoZIhvcNAQELBQADggIBANS/5GM2J3AnFJsyTUi9Lwt/E0zxVpWG
# nFHVKRb4VFjoAqSfazc6fb2cYRWVq1uUi/WpVMqStTEtgxnTP5EDqaZ9e57Zjv9g
# FvMzmRR5SBTbLUyZuKfrFp1P0PMQJ4TsTj7eTYOZnG5X4YsVhCyqQNt7yjLv7cFK
# JTb2rJkBhP29EMAs9QLlnDKg+Q18puqOXdWAVOoi5sRCvnozRh0xaWoKqrTJWWf2
# Y9uEcfNcc6NpCy6uiEcJ/tVPxy3v2mjfgV3xdyyqbKF0oHLWN3KSeuKT4Xe8SX/3
# Spqifk3wpNmga04WVokU+dnYOpC1vZZaR+4CgZasZIDjczKXv49htSyuL82sy8B3
# 1n4n0WWqwzBdAXEAHu6MmLiE/wEfyPqqSbLi66VTlJJBrpeQSVxopBhKklxKOSPJ
# MMg6l/otkFNoXHp56ioNnSVRGGJGo77XKjy5c7z17qSAF4Ly3VY3khOpeeOhxiAO
# /IWmm2xQOCdFSIjUz9CX87b31WS0yQgvvaLpB3gEGyuPdn6IsSco/16lTCiw/Wbc
# 3a/3KFdDUeK6wmXrch9cjJ8Elpa9AOBTcmTh4hlKv/YoiPim1e3j3oJGIdOLTXWR
# zAOl2NAsBCIK+iPWm7KF/BV/YblnAGm0heK81FtrfgqQPmiqYSgXXJEVDziIOx/+
# CLKf9chPthj/MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
# VGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
# ggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+
# F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU
# 88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqY
# O7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzp
# cGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0Xn
# Rm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1
# zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZN
# N3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLR
# vWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTY
# uVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUX
# k8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB
# 2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKR
# PEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0g
# BFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5t
# aWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQM
# MAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQE
# AwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQ
# W9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
# bS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBa
# BggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0
# LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqG
# SIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOX
# PTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6c
# qYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/z
# jj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz
# /AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyR
# gNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdU
# bZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo
# 3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4K
# u+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10Cga
# iQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9
# vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8qGC
# A00wggI1AgEBMIH5oYHRpIHOMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
# cnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25z
# MScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046QTQwMC0wNUUwLUQ5NDcxJTAjBgNV
# BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMV
# APmvcNVGkAZCj2xMtQd4ELzs2kr6oIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzAR
# BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
# Y3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3Rh
# bXAgUENBIDIwMTAwDQYJKoZIhvcNAQELBQACBQDo4VqlMCIYDzIwMjMxMDIzMjA0
# ODM3WhgPMjAyMzEwMjQyMDQ4MzdaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIFAOjh
# WqUCAQAwBwIBAAICBTowBwIBAAICEpAwCgIFAOjirCUCAQAwNgYKKwYBBAGEWQoE
# AjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkq
# hkiG9w0BAQsFAAOCAQEAQBlLfPEnSrayeJnd5cMmNErs01E+yPorGptY+qFhZN81
# ssuOQziTDGcXoEXpX2wsfeTHsvjvuAWf0VLVKNkLZJ6lKY1BhTK3QJGwIugqkB1C
# +Oq7cdiksgTHXZDdsea7VgMjMmrQvQNNfaIqZyNAQOfyqsThNRKrfPTdp4FOp5uK
# VzPkeCaCeT9PU+op/4b3VEHyD6lAeTn3KUnvclMw0ZkmYMMiP+682VAFRtoudUHf
# YmcGV9klUCQNETEIvFFwvuqagoVuLLI+ECBkCYUfQA2Erd1GT2LuXxXW7u2DJ4EI
# eYHZmZDME2WqtP0aYCf7ynyVYUYNu8uPIEeFgxbY8DGCBA0wggQJAgEBMIGTMHwx
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p
# Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB1idp/3ItVsiuAAEAAAHW
# MA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQw
# LwYJKoZIhvcNAQkEMSIEII4oc49te84rvVYWLOAXyO9GgtZMXcJ+piys6XybwTvt
# MIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQg1stNDVd40z4QGKc4QkyNl3SM
# w0O6v4Ar47w/XaPlJPwwgZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0Eg
# MjAxMAITMwAAAdYnaf9yLVbIrgABAAAB1jAiBCDbzhRNqeKGW42HLR6x+cfyfvLR
# x+XdtCQpjv6mWADV+jANBgkqhkiG9w0BAQsFAASCAgCxsziAFX6p4LaUj99u/N8e
# pO9A0T7Cfqnf1wW5OFShnjyhcDByeMUOkDFmAB/XzyHpx3w3tksdjUWLuDU35TpJ
# bTshpToKQQ7x4q/P+n3VA0VaAORMSrItxkUcqlNtfIWXKs7emDJ/OtmB1pr2PQA4
# l5I5tcBL8VP2H+lRXTmwUD6LXE8Pixj09vOM6CXkzEjgogelL7PZZg4nPCJXnWHs
# sC3NrbLXW2Snasx7aykbiP9In9ZDxgw30o5hhTaPCnBvQl19uKQ6PTVmd88rQJkP
# s5iA/hRlM9v8G/Wt9sb1dJNXVOLtVR0bAQucckR6hmvbibv3HUdrRHRR+7AtOveD
# g5WWRpmsUGOnno2brosEgeMCsBdRMiA/0HJB2QKGsPKbDSab4U+wMsNVa1i7c68L
# RgZeFlwiM/zkYFCKk/PftSdRVXFpJxw6Ox4INI15l8yGZoLZsgxk83CF1ASNj2sR
# pYvpzPdvqOEd188gMaMO4pLgJiPDG7sVVhM7pFZjOQAicpWFRfuRY1CnqepYq2AO
# fnOVQ3BOgl6V6VbjcCwGdwIixMT5Lc81m9fEg3LXwrkJ0NsL5ncLuxiOgduEUwwQ
# eIl2yKgWBPAwsB9vjLJ4+vctd4lTgLMKwK7DUWMXQ6tBJLJHrXIWTWwTvunltR74
# FKyjpPhdU6PinJZGttfyvQ==
# SIG # End signature block
