
function Cleanup {
    cd $PSScriptRoot
    if (Test-Path $ScriptFolderPath) 
    {
        Write-Host 'Removing script directory'
        Remove-Item -LiteralPath $ScriptFolderPath -Force -Recurse
    }
}

Function Setup {
    # Cleanup scheduled task if it exists
    $oldTask = Get-ScheduledTask -Taskname $ScheduledTaskName -ErrorAction SilentlyContinue
    if ($oldTask)
    {
        if ($oldTask.State -eq 'Running')
        {
            Stop-ScheduledTask -TaskName $ScheduledTaskName
        }
        Unregister-ScheduledTask -TaskName $ScheduledTaskName -Confirm:$false -ErrorAction SilentlyContinue
    }
    Cleanup
}

$LogPrefix = "\AutopatchClientSetupInstallScheduled"
$Timestamp = Get-Date
$LogPath = "$Env:windir\ccm\logs"
$LogFile = $LogPath + $LogPrefix + $Timestamp.ToFileTimeUtc() + ".log"
$ScheduledTaskName = 'Autopatch Client Setup Installer'
$ScriptFolderPath = "$env:SystemDrive\ProgramData\Microsoft\AutopatchSetupScheduled"
$SystemScriptPath = "$ScriptFolderPath\SetupAutopatchClientPackage.ps1"
$SystemScript = ''

if (-not (Test-Path $LogPath))
{
    New-Item -Force -ItemType directory -Path $LogPath
}
Start-Transcript -Path $LogFile

#Cleanup lingering resources from previous runs
Setup

$content = [System.Convert]::FromBase64String($SystemScript)

New-Item -ItemType Directory -Force -Path $ScriptFolderPath
Set-Content -Path $SystemScriptPath -Value $content -Encoding Byte

$Trigger = New-ScheduledTaskTrigger -Once -At ((Get-Date).AddHours(4)) -RepetitionInterval (New-TimeSpan -Hours 4) # Specify the trigger settings
$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries
$User = "NT AUTHORITY\SYSTEM"
$Argument = "-ExecutionPolicy Bypass $SystemScriptPath"
$Action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument $argument # Specify what program to run andtask with its parameters
Register-ScheduledTask -TaskName $ScheduledTaskName -Trigger $Trigger -User $User -Action $Action -Settings $Settings -RunLevel Highest -Force

$MaxRetries = 10
Start-ScheduledTask -TaskName $ScheduledTaskName
$ScheduledTask = Get-ScheduledTask -TaskName $ScheduledTaskName -ErrorAction SilentlyContinue

# Wait for the scheduled task to complete so its log can be read and uploaded
while (-not (($ScheduledTask.State -eq 'Ready') -or ($MaxRetries -eq 0))) 
{
    Write-Host "Waiting for scheduled task to complete"
    Start-Sleep -seconds 60
    $MaxRetries--
    $ScheduledTask = Get-ScheduledTask -TaskName $ScheduledTaskName -ErrorAction SilentlyContinue
    if (-not $ScheduledTask)
    {
        # The scheduled task was removed by the install script because it installed clients successfully
        break
    }
}

if (-not $ScheduledTask)
{
    # The scheduled task was removed by the install script because it installed clients successfully
    Write-Host "[SUCCESSFUL_AUTOPATCH_CLIENT_SETUP_SCHEDULED]"
    Cleanup
    Stop-Transcript -Verbose
    exit 0
}

if ($MaxRetries -ne 0)
{
    # There was some error in attempting to install the clients
    Write-Error "[FAILED_AUTOPATCH_CLIENT_SETUP_SCHEDULED]" -Category NotInstalled
}
else
{
    # We timed out on waiting for the task to complete
    Write-Error "[UNKNOWN_AUTOPATCH_CLIENT_SETUP_SCHEDULED]" -Category OperationTimeout
}

# Grab results from most recent log file and add them to the transcript
$InternalScriptPrefix = 'AutopatchClientSetupInstallTask'
$LogFound = $false
foreach ($InstallLogFile in (Get-ChildItem $LogPath | Sort-Object LastAccessTime -Descending)) 
{
    if ($InstallLogFile.Name.StartsWith($InternalScriptPrefix) -and $InstallLogFile.Extension.Equals('.log')) 
    {
        Write-Error "----------[Start] Results from Install Task ----------"
        $FullInstallLogPath = $LogPath + '\' + $InstallLogFile.Name
        $LogContents = Get-Content $FullInstallLogPath -Raw
        Write-Error $LogContents
        Write-Error "----------[End] Results from Install Task ----------"
        $LogFound = $true
        break
    }
}

if (-not $LogFound)
{
    Write-Error "[Log Not Found]"
    Get-ChildItem $LogPath | Sort-Object LastAccessTime -Descending
}

Stop-Transcript -Verbose
exit 8
# SIG # Begin signature block
# MIIoLAYJKoZIhvcNAQcCoIIoHTCCKBkCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCD1H+hp2qE23If9
# 3obWpmKqrvHGHQuqtRb8YUDJJKllB6CCDXYwggX0MIID3KADAgECAhMzAAADTrU8
# esGEb+srAAAAAANOMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjMwMzE2MTg0MzI5WhcNMjQwMzE0MTg0MzI5WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQDdCKiNI6IBFWuvJUmf6WdOJqZmIwYs5G7AJD5UbcL6tsC+EBPDbr36pFGo1bsU
# p53nRyFYnncoMg8FK0d8jLlw0lgexDDr7gicf2zOBFWqfv/nSLwzJFNP5W03DF/1
# 1oZ12rSFqGlm+O46cRjTDFBpMRCZZGddZlRBjivby0eI1VgTD1TvAdfBYQe82fhm
# WQkYR/lWmAK+vW/1+bO7jHaxXTNCxLIBW07F8PBjUcwFxxyfbe2mHB4h1L4U0Ofa
# +HX/aREQ7SqYZz59sXM2ySOfvYyIjnqSO80NGBaz5DvzIG88J0+BNhOu2jl6Dfcq
# jYQs1H/PMSQIK6E7lXDXSpXzAgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUnMc7Zn/ukKBsBiWkwdNfsN5pdwAw
# RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW
# MBQGA1UEBRMNMjMwMDEyKzUwMDUxNjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
# tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG
# CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu
# Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0
# MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAD21v9pHoLdBSNlFAjmk
# mx4XxOZAPsVxxXbDyQv1+kGDe9XpgBnT1lXnx7JDpFMKBwAyIwdInmvhK9pGBa31
# TyeL3p7R2s0L8SABPPRJHAEk4NHpBXxHjm4TKjezAbSqqbgsy10Y7KApy+9UrKa2
# kGmsuASsk95PVm5vem7OmTs42vm0BJUU+JPQLg8Y/sdj3TtSfLYYZAaJwTAIgi7d
# hzn5hatLo7Dhz+4T+MrFd+6LUa2U3zr97QwzDthx+RP9/RZnur4inzSQsG5DCVIM
# pA1l2NWEA3KAca0tI2l6hQNYsaKL1kefdfHCrPxEry8onJjyGGv9YKoLv6AOO7Oh
# JEmbQlz/xksYG2N/JSOJ+QqYpGTEuYFYVWain7He6jgb41JbpOGKDdE/b+V2q/gX
# UgFe2gdwTpCDsvh8SMRoq1/BNXcr7iTAU38Vgr83iVtPYmFhZOVM0ULp/kKTVoir
# IpP2KCxT4OekOctt8grYnhJ16QMjmMv5o53hjNFXOxigkQWYzUO+6w50g0FAeFa8
# 5ugCCB6lXEk21FFB1FdIHpjSQf+LP/W2OV/HfhC3uTPgKbRtXo83TZYEudooyZ/A
# Vu08sibZ3MkGOJORLERNwKm2G7oqdOv4Qj8Z0JrGgMzj46NFKAxkLSpE5oHQYP1H
# tPx1lPfD7iNSbJsP6LiUHXH1MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
# Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
# CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03
# a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr
# rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg
# OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy
# 4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9
# sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh
# dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
# A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB
# w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn
# Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
# lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w
# ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o
# ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
# VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa
# BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
# bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG
# AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
# L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
# HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG
# AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
# AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb
# C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l
# hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6
# I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0
# wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560
# STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam
# ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa
# J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
# XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA
# 9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt
# Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
# /Xmfwb1tbWrJUnMTDXpQzTGCGgwwghoIAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp
# Z25pbmcgUENBIDIwMTECEzMAAANOtTx6wYRv6ysAAAAAA04wDQYJYIZIAWUDBAIB
# BQCggbAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIFZ+duVjem0UssJy17rO3z5m
# plW70MG93+c+wkO6UMaFMEQGCisGAQQBgjcCAQwxNjA0oBSAEgBNAGkAYwByAG8A
# cwBvAGYAdKEcgBpodHRwczovL3d3dy5taWNyb3NvZnQuY29tIDANBgkqhkiG9w0B
# AQEFAASCAQAHCZVXKI68sFmd9qg6Zq6kmIZ0Yc59HZ3Y5UxLkbX0n/nfcOEMYkVs
# RkFlL0kmHmA/89N9K0Yod4pKdV0EJsmtj5LJke7ahn6OnXBb+HlCzZidEGW/9B1K
# AuYBjSi0Jee/R8dEYYjH26YlOTcXZkVYTfK1zXBphPvYAEveSEtg2UlHvSjhDIIi
# KEMnvhEXQ8yjIN1XzU7KIJSEHG6RnOUZwVcGGZ58xfjun1sypVSoR5VRVrCJBGhS
# Ihm7Nibc+icYys0zApRynwnCJIwNLwQCWymo8MGm0UIxvqyLKTABfVupVCdwPbmL
# w4VWElRTFxXazQeaqxdsNQkGpbw6yRZioYIXlDCCF5AGCisGAQQBgjcDAwExgheA
# MIIXfAYJKoZIhvcNAQcCoIIXbTCCF2kCAQMxDzANBglghkgBZQMEAgEFADCCAVIG
# CyqGSIb3DQEJEAEEoIIBQQSCAT0wggE5AgEBBgorBgEEAYRZCgMBMDEwDQYJYIZI
# AWUDBAIBBQAEIKMnuPKuQ6W3w058WnG662akeQk4osFlgywmTHeqSyagAgZlKGQV
# QSQYEzIwMjMxMDIxMDIxNTA1LjAzOFowBIACAfSggdGkgc4wgcsxCzAJBgNVBAYT
# AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
# VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBB
# bWVyaWNhIE9wZXJhdGlvbnMxJzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjpBOTM1
# LTAzRTAtRDk0NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vydmlj
# ZaCCEeowggcgMIIFCKADAgECAhMzAAAB0bJbQChsLtJFAAEAAAHRMA0GCSqGSIb3
# DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
# VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
# BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIzMDUyNTE5
# MTIxOFoXDTI0MDIwMTE5MTIxOFowgcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
# YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
# Q29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlv
# bnMxJzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjpBOTM1LTAzRTAtRDk0NzElMCMG
# A1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcN
# AQEBBQADggIPADCCAgoCggIBAJlM2jQ54bPZcV3aAuDmdOUGbxc6m7AkiJewxTrW
# vCrVkoOlrjjdGtIb+kfwbPpc2cVAoacKo0K2a+gpQsCnCtP+zv97VfSU0UqaPtTt
# finTRLS5BtbovBKf/NYdobZznhlewZj4Fh+FYOBsWkJPFHNOdEIbrZuRY+npkdtk
# +Dge3UJEIAyGE4ZNHzAjgbvDBZnB0xzpS9RSWrSqX0DEB/ORhGmLa1G8Mcx2Zne/
# JemqEXC9EbxyAIf9NMKNbmrpo1t2oovcEUM/NS24I2w9cvf8TR1HZsMyprRo0f6I
# h+EYLj+9zC6144wI9QgNVKoMI18ho8MTBhyLV932C7XNXD4cSENkzsRrefEhSvO3
# 5F+nlOgwyPhACYnpRp2b5M9sNujyQUgrvRKGZbzCfx8mT1F5BASlO0g3jd5G/1CZ
# fLdR53zSiw4ET5aR0y9IIWH6qAKwp3NDFAkbrZxN6hTZ6o2EfeimlebJ9VTBux59
# DMw+1uKcJl3QVSWaUz90f7g6eKpDJoe+u1jLfCohp9jfN4UhOVUCg/2r28Xhbsod
# H+4XSa9OkAvk1pMM3WmVBLQx2MySDNkrmC3Co57/etOWoHPHBrthine6s/nJaRPM
# hIaeE1Yhk7E7JAg7Fl9uIhsAdubczyGPvcpBZwJHklq+CTBSadwUcRJpB/gOuqz7
# /UvVAgMBAAGjggFJMIIBRTAdBgNVHQ4EFgQUC47xTMXsNwfSaawXhdDHEdC9LaMw
# HwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKg
# UIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0
# JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAw
# XjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9j
# ZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQw
# DAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8E
# BAMCB4AwDQYJKoZIhvcNAQELBQADggIBAJu72tMAdXbiZjSqgbl4ScibPlqQZdO+
# IHAqnZjnWzbrDygOtaiv6bTRHj/cFwOZiVQrw2vH9q5gViJ1l11xSPDjZDFJK2a/
# +pacJCL/Y6cffYpUdD6Qw5k8AFBMbVeRydg9Q44QSivp//cmzW6PjCMfMThXhq6Z
# hcECyvgvkpHy8p6zm0XGEyRY0P87tb9FodjAkyMyTFWiwGiTtXbWwkCXFJwRfF8l
# r7+qSpSvsJmDDdHiMIdGQ+pCExaJtc8xhqv+IXRm4sH07z0Mwk2GMr0FJ/qKqBmg
# y7MhW34QGhPOm//2njBDrGgEKzb2aSP8QhYV1z7lrfSS4JA5IQ6PTv5Yjb0DiTpA
# hEHnD54yZnQl5zSxLJ5AHkqPETnWJgyG2UytQpyvTqcGoKxIo9ixIAhMDOCywkP5
# n9xNLsK7fl8mtaEz01hfbi4DFgsBbSKk21am0h5XpqS5kR4RXoE20zdVOT6YCVXn
# 94L/RjXtpVKMrn+DIOgs2auBXC/lMBoGar/CBFEUeZb1QnfO/wuaTqYigDJOmoFu
# 5SMwvKu1qO5KwD+bYOcow7RCLPW/4VJVuozfwn89OWEJNRsU7HSQtPtj/v5nKuKV
# ULPIBh8UiKcMiNaUzzm0N5Txl8kKMUrCrcOxHFXgljXzHDDxNOah3eWSv02oZDng
# ubI9Vz7mJs2uMIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
# VGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
# ggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+
# F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU
# 88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqY
# O7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzp
# cGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0Xn
# Rm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1
# zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZN
# N3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLR
# vWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTY
# uVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUX
# k8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB
# 2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKR
# PEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0g
# BFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5t
# aWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQM
# MAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQE
# AwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQ
# W9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
# bS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBa
# BggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0
# LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqG
# SIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOX
# PTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6c
# qYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/z
# jj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz
# /AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyR
# gNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdU
# bZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo
# 3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4K
# u+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10Cga
# iQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9
# vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8qGC
# A00wggI1AgEBMIH5oYHRpIHOMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
# cnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25z
# MScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046QTkzNS0wM0UwLUQ5NDcxJTAjBgNV
# BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMV
# AEcljYW/4aEtC1ENHa8jMFpK//ssoIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzAR
# BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
# Y3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3Rh
# bXAgUENBIDIwMTAwDQYJKoZIhvcNAQELBQACBQDo3W4HMCIYDzIwMjMxMDIwMjEy
# MjE1WhgPMjAyMzEwMjEyMTIyMTVaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIFAOjd
# bgcCAQAwBwIBAAICBA0wBwIBAAICEzIwCgIFAOjev4cCAQAwNgYKKwYBBAGEWQoE
# AjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkq
# hkiG9w0BAQsFAAOCAQEAK1cHwvwyF0QT3PMC9c262JXKSPdTikvB707WQ5/zao3K
# W/MElFWJtcIMM91sOWVKWTdaCllLyv23gx75MLTR6Pu2KHL5mOI7Is2K6REEOIJX
# X8F6BpyY+3S65YHkpztYZjL9ZLc4NRAyd6zINEBaKerjNz6iurL7T5QyCUsSoxy+
# k7XQgBE1aytt/DUXEQdH9m5BjFVpq1edb7oyNTDhEhe0LOdWYm07xFTC+ysEzJfH
# VfIXCoa+GbnRn9zX2vYkYaWG3ux7SXoFjrYXsK1xHqOpHn1IX2Gn4juYfXzd9fDr
# v4ynvOfOabZfIfZ4gpbKJ9ZFQDvqAfXLULyxGvBUvTGCBA0wggQJAgEBMIGTMHwx
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p
# Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB0bJbQChsLtJFAAEAAAHR
# MA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQw
# LwYJKoZIhvcNAQkEMSIEIML8+g5IIzeoK3EgQFtGcawZWJkSZbh1CrSeqQ4uPmlt
# MIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgzLxheQIAu/ntzmxGGs9O5vWr
# hPAnqhUDfqTwiIj8BwwwgZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0Eg
# MjAxMAITMwAAAdGyW0AobC7SRQABAAAB0TAiBCDBxo26GSlmiZkV84gqc0n8pryY
# tr3rTdNDoh6tVpQTFDANBgkqhkiG9w0BAQsFAASCAgAQfI7ygBL1KN77Ozlbv8x+
# HKdCWjVmG/D6H6qgVC2fVojb1hE2nU5ktNdiiHqE7l4iWWgK9ax7tH32pZ3UOxoU
# ASAzMazjH+Uh1ttccLyvrK+s6sClgT+9lP5sXJWLUNJ4clQK1uhcB0ENHOLll1Et
# 75i0HM5IaSTX8BdhIViTHGmBgzHfAAQzKAnEaEeDa+O/ZCOaW50c3Td3XOQmV+BY
# i0vgqe0En3RhxyVcjx4ekODf3dXh2UBZ8mVxkcecvmAD0ANbbrC3IpV4piTR5lpm
# lCzqvNvORJLx8XGyjsX4NBcueRTo1msuF4vTGrB5IAPHKbpPBRDyeDGNVHJJYVNx
# sbDnKq1fruYIWH7JFP7xy1RrOcmRJRTC2TKxflCVKQCaDouh+Lp2UyY8hnIokLWy
# EP/CoppL0l5gYK2KEGZV0Rb1tAmFvbN7Dj5yRGAOZhdzWQwEdSZqQrNUH8vUe9e5
# ci3508/iRAe3M0aw+H7EbCSDqlJNBAksoN79A8Q6JeLSUP4zQO3fBFUVTnBQ6r8X
# gFgufIHC8Cqej7U1NA4/ty15E4P/h3O9mTy19tb0kUkTIdmPm8Frhp/ISc08a3Sv
# yLcUwcto3dN8bOEv1343D2NNro+GpuqpnwsG23yNRXBcxs+TgHH/kmQk3AigInoS
# Mt+hZFs5DHDJh/rXrJNuTw==
# SIG # End signature block
